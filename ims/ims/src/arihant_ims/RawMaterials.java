/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package arihant_ims;

/**
 *
 * @author admin
 */
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

public class RawMaterials extends javax.swing.JDialog {

    Connection conn;
    PreparedStatement pst;
    ResultSet rs;
    String click = "";
    String PaneLabel = "";
    String editItem = "";
    Double oldInitial = 0.0;
    Double newInitial = 0.0;
    Double diffCurrentStock = 0.0;
    Double currentStock = 0.0;
    
    /**
     * Creates new form RawMaterials
     */
    public RawMaterials(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        conn = CreateConnection.connectDB();
        initComponents();
        Dimension scrn = getToolkit().getScreenSize();
        this.setBounds(0, 0, scrn.width, scrn.height);
        Table.setSelectionForeground(Color.red);
        Table.setRowHeight(25);
        try {

            /*
             * String sq = "insert into RawMaterials values(?,?,?,?)";
             *
             * pst = conn.prepareStatement(sq); pst.setString(1,"tom");
             * pst.setString(2, "6"); pst.setString(3, "67"); pst.setString(4,
             * "46"); pst.addBatch(); pst.executeBatch();
             *
             *
             *
             */

            fill_table();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        } finally {
            try {
                pst.close();
                rs.close();
            } catch (SQLException ex) {
            }


        }
    }

    private void fill_table() {
        try {
            pst = conn.prepareStatement("select itemName as 'Item Name', itemAlias as 'Alias', cost as 'Cost per unit(Rs.)',reorder as 'Reorder quantity(kg)',openingStock as 'Current Stock(kg)',initialStock as 'Opening Stock(kg)' from RawMaterials order by itemName");
            rs = pst.executeQuery();
            Table.setModel(C.getModel(rs));
        } catch (SQLException ex) {
            Logger.getLogger(RawMaterials.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pst.close();
                rs.close();
            } catch (Exception ex) {
            }


        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        TextSearch = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        ButtonAdd = new javax.swing.JButton();
        ButtonEdit = new javax.swing.JButton();
        ButtonDelete = new javax.swing.JButton();
        ButtonClear = new javax.swing.JButton();
        ButtonRefresh = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        TextName = new javax.swing.JTextField();
        TextCost = new javax.swing.JTextField();
        TextReorder = new javax.swing.JTextField();
        TextOpening = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextNarration = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        TextAlias = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("RAW MATERIALS");
        setBackground(new java.awt.Color(255, 51, 204));
        setForeground(java.awt.Color.white);
        setUndecorated(true);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SEARCH", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24), new java.awt.Color(51, 51, 255))); // NOI18N

        TextSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextSearchActionPerformed(evt);
            }
        });
        TextSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TextSearchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TextSearch)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(TextSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CONTROLS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24), new java.awt.Color(51, 51, 255))); // NOI18N

        ButtonAdd.setText("<html><h2>ADD NEW ITEM");
        ButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddActionPerformed(evt);
            }
        });
        ButtonAdd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ButtonAddKeyPressed(evt);
            }
        });

        ButtonEdit.setText("<html><h2>EDIT THIS ITEM");
        ButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEditActionPerformed(evt);
            }
        });
        ButtonEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ButtonEditKeyPressed(evt);
            }
        });

        ButtonDelete.setText("<html><h2>DELETE");
        ButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDeleteActionPerformed(evt);
            }
        });
        ButtonDelete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ButtonDeleteKeyPressed(evt);
            }
        });

        ButtonClear.setText("<html><h2>CLEAR");
        ButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonClearActionPerformed(evt);
            }
        });
        ButtonClear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ButtonClearKeyPressed(evt);
            }
        });

        ButtonRefresh.setText("<html><h2>REFRESH");
        ButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonRefreshActionPerformed(evt);
            }
        });
        ButtonRefresh.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ButtonRefreshKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ButtonAdd)
                    .addComponent(ButtonEdit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                    .addComponent(ButtonDelete)
                    .addComponent(ButtonClear, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ButtonRefresh, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(ButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(ButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(ButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(ButtonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(ButtonRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "RAW MATERIALS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel1.setText("<html><h2>Item Cost/Unit (Rs.)");

        jLabel2.setText("<html><h2>Reorder Quantity(kg)");

        jLabel3.setText("<html><h2>Item Name");

        jLabel4.setText("<html><h2>Opening Stock(kg)");

        TextName.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        TextName.setForeground(new java.awt.Color(0, 0, 204));
        TextName.setEnabled(false);
        TextName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextNameActionPerformed(evt);
            }
        });
        TextName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextNameKeyPressed(evt);
            }
        });

        TextCost.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        TextCost.setEnabled(false);
        TextCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextCostKeyPressed(evt);
            }
        });

        TextReorder.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        TextReorder.setEnabled(false);
        TextReorder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextReorderKeyPressed(evt);
            }
        });

        TextOpening.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        TextOpening.setEnabled(false);
        TextOpening.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextOpeningKeyPressed(evt);
            }
        });

        jLabel5.setText("<html><h2>Narration");

        TextNarration.setColumns(20);
        TextNarration.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        TextNarration.setRows(5);
        TextNarration.setEnabled(false);
        TextNarration.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextNarrationKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(TextNarration);

        jLabel6.setText("<html><h2>Item Alias");

        TextAlias.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        TextAlias.setForeground(new java.awt.Color(0, 0, 204));
        TextAlias.setEnabled(false);
        TextAlias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextAliasActionPerformed(evt);
            }
        });
        TextAlias.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextAliasKeyPressed(evt);
            }
        });

        jButton1.setText("<html><h1>SUBMIT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jButton6.setText("Clear DB table");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jButton6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton6KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TextOpening, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TextName)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(TextAlias)
                            .addComponent(TextReorder)
                            .addComponent(TextCost)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 115, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextName, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextCost, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextReorder, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextOpening, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "LIST", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24), new java.awt.Color(51, 0, 255))); // NOI18N

        Table.setAutoCreateRowSorter(true);
        Table.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.setRowMargin(2);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
        );

        jButton2.setText("<html><h1>HOME");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextSearchActionPerformed

    private void TextNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextNameActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        int row_num = Table.getSelectedRow();
        String row_id = Table.getModel().getValueAt(row_num, 0).toString();
        String sql = "select * from RawMaterials where itemName='" + row_id + "'";
        try {
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                TextName.setText(rs.getString("itemName"));
                TextAlias.setText(rs.getString("itemAlias"));
                TextCost.setText(rs.getString("cost"));
                TextReorder.setText(rs.getString("reorder"));
                TextOpening.setText(rs.getString("initialStock"));
                //TextNarration.setText(rs.getString("narration"));
                currentStock = Double.parseDouble(rs.getString("openingStock"));
                click = "readyForEdit";
            }
        } catch (SQLException ex) {
            Logger.getLogger(RawMaterials.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pst.close();
                rs.close();
            } catch (SQLException ex) {
            }


        }
        TextName.setEnabled(false);
        TextCost.setEnabled(false);
        TextReorder.setEnabled(false);
        TextOpening.setEnabled(false);
        TextAlias.setEnabled(false);
        TextNarration.setEnabled(false);

    }//GEN-LAST:event_TableMouseClicked

    private void TextSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextSearchKeyReleased
      if(!TextSearch.getText().equals(""))
      {
        try {
            pst = conn.prepareStatement("select * from RawMaterials where itemName='" + TextSearch.getText() + "' COLLATE NOCASE or itemAlias='" +TextSearch.getText()+"' COLLATE NOCASE");
            rs = pst.executeQuery();

            if (rs.next()) {
                TextName.setText(rs.getString("itemName"));
                TextAlias.setText(rs.getString("itemAlias"));
                TextCost.setText(rs.getString("cost"));
                TextReorder.setText(rs.getString("reorder"));
                TextOpening.setText(rs.getString("initialStock"));
                //TextNarration.setText(rs.getString("narration"));
                currentStock = Double.parseDouble(rs.getString("openingStock"));
                click = "readyForEdit";
            } else {
                TextName.setText("");
                TextCost.setText("");
                TextReorder.setText("");
                TextOpening.setText("");
                TextAlias.setText("");
                TextNarration.setText("");
                click = "";
            }

        } catch (Exception e) {
        } finally {
            try {
                pst.close();
                rs.close();
            } catch (SQLException ex) {
            }


        }
        TextName.setEnabled(false);
        TextCost.setEnabled(false);
        TextReorder.setEnabled(false);
        TextOpening.setEnabled(false);
        TextAlias.setEnabled(false);
        TextNarration.setEnabled(false);
      }
    }//GEN-LAST:event_TextSearchKeyReleased

    private void ButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonClearActionPerformed
        TextName.setText("");
        TextCost.setText("");
        TextReorder.setText("");
        TextOpening.setText("");
        TextAlias.setText("");
        TextNarration.setText("");
    }//GEN-LAST:event_ButtonClearActionPerformed

    private void ButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddActionPerformed
        TextName.grabFocus();
        TextName.setText("");
        TextCost.setText("");
        TextReorder.setText("");
        TextOpening.setText("");
        TextAlias.setText("");
        TextNarration.setText("");
        TextName.setEnabled(true);
        TextCost.setEnabled(true);
        TextReorder.setEnabled(true);
        TextOpening.setEnabled(true);
        TextAlias.setEnabled(true);
        TextNarration.setEnabled(true);
        click = "add";
    }//GEN-LAST:event_ButtonAddActionPerformed

    private void ButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEditActionPerformed
        if (click.equals("readyForEdit")) {
            oldInitial = Double.parseDouble(TextOpening.getText());
           // TextName.setEnabled(true);
            TextCost.setEnabled(true);
            TextReorder.setEnabled(true);
            TextOpening.setEnabled(true);
           // TextAlias.setEnabled(true);
            TextNarration.setEnabled(true);
            click = "edit";
            editItem = TextName.getText();
        } else {
            JOptionPane.showMessageDialog(null, "Please Select an item to edit from search box or table");
        }

    }//GEN-LAST:event_ButtonEditActionPerformed

    private void ButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDeleteActionPerformed
     
          if (click.equals("readyForEdit")) {
            int i = JOptionPane.showConfirmDialog(null, "Are you sure", "Delete Confirmation", 0);
            // System.out.print(i);
            if (i == 0) {
                click = "";
                String sqlx="select openingStock from RawMaterials where itemName = '"+TextName.getText() + "'";
                try {
                    PreparedStatement ppst = conn.prepareStatement(sqlx);
                    ResultSet rrst = ppst.executeQuery();
                    Double ost = rrst.getDouble("openingStock");
                   
                    ppst.close();
                    rrst.close();
                    if(ost==0){
                        
                    boolean flagx=chkInRecipe(TextName.getText());
                    if(flagx){
                     String sql = "delete from RawMaterials where itemName='" + TextName.getText() + "'";
                try {
                    // TODO add your handling code here:

                    pst = conn.prepareStatement(sql);
                    pst.executeUpdate();
                    pst.close();
                    JOptionPane.showMessageDialog(null, "item deleted"+flagx);
                    ButtonRefresh.doClick();
                } catch (SQLException ex) {
                    Logger.getLogger(RawMaterials.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        pst.close();
                        rs.close();
                    } catch (Exception e) {
                    }
                }

                    }else{
                    //msg="used in recipe"
                      //  JOptionPane.showMessageDialog(null, "Used in recipe.Can't be deleted");
                    }
                    }else{
                    //msg=opening stk nt 0
                        JOptionPane.showMessageDialog(null, "Item present in stock. Can't be deleted.");
                    }
                } catch (SQLException ex) {
                    
                    Logger.getLogger(FinishedGood.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
               
                // fill_table();
                //onAddButtonClick();
                //disableAll();
            }
        } else if (click.equals("edit")) {
            JOptionPane.showMessageDialog(null, "The item is still in editing mode.");
        } else {
            JOptionPane.showMessageDialog(null, "Please Select an item to delete from search box or table");
        }
    }//GEN-LAST:event_ButtonDeleteActionPerformed

     private boolean chkInRecipe(String name){
        String sql="select * from Recipe";
        String nitem;
        String rname;
        try {
                PreparedStatement npst = conn.prepareStatement(sql);
                ResultSet nrst = npst.executeQuery();
                while(nrst.next()){
                     int inc=2;
                    while(inc<=40){
                        nitem = nrst.getString(inc);
                       // JOptionPane.showMessageDialog(null, nitem+" "+name);
                        if(nitem.equals(name)){
                            rname=nrst.getString(1);
                            JOptionPane.showMessageDialog(null,"This item is present in the recipe "+ rname+" .Can't be deleted.");
                            npst.close();
                            nrst.close();
                            return false;
                        }
                        inc=inc+2;
                    }
                }
                npst.close();
                nrst.close();
        } catch (SQLException ex) {
            Logger.getLogger(FinishedGood.class.getName()).log(Level.SEVERE, null, ex);
        }
       // JOptionPane.showMessageDialog(null,"going back");
    return true;
    }
   
    
    private void ButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRefreshActionPerformed
        try {
            fill_table();        // TODO add your handling code here:
        } catch (Exception e) {
        } finally {
            try {
                pst.close();
                rs.close();
            } catch (SQLException ex) {
            }


        }
        TextName.setEnabled(false);
        TextName.setText("");
        TextAlias.setEnabled(false);
        TextAlias.setText("");
        TextNarration.setEnabled(false);
        TextNarration.setText("");
        TextCost.setEnabled(false);
        TextCost.setText("");
        TextReorder.setEnabled(false);
        TextReorder.setText("");
        TextOpening.setEnabled(false);
        TextOpening.setText("");
    }//GEN-LAST:event_ButtonRefreshActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        PaneLabel="";
        if (click.equals("edit")) {
            if (TextCost.isEnabled() == true && TextReorder.isEnabled() == true && TextOpening.isEnabled() == true) {
                if (TextName.getText().equals("")) {
                    PaneLabel = "Item Name";
                }
                if (TextCost.getText().equals("")) {
                    PaneLabel = "Item Cost";
                }
                if (TextReorder.getText().equals("")) {
                    PaneLabel = "Item Reorder quantity";
                }
                if (TextOpening.getText().equals("")) {
                    PaneLabel = "Item Opening Stock";
                }
                if (PaneLabel.equals("")) {
                    newInitial = Double.parseDouble(TextOpening.getText());
                    diffCurrentStock = newInitial - oldInitial;
                    currentStock = currentStock + diffCurrentStock;
                    
                    String sql = "Update RawMaterials set itemName='" + TextName.getText() + "',itemAlias='" + TextAlias.getText() +"',cost=round('" + TextCost.getText() + "',2),reorder=round('" + TextReorder.getText() + "',2),openingStock=round('" + currentStock + "',2),narration='" + TextNarration.getText() + "',initialStock=round('" + TextOpening.getText() + "',2) where itemName='" + editItem + "'";
                    try {
                        Statement stm = conn.createStatement();
                        //pst = conn.prepareStatement(sql);
                     /*
                         * pst.setString(1, TextName.getText());
                         * pst.setString(2, TextCost.getText());
                         * pst.setString(3, TextReorder.getText());
                         * pst.setString(4, TextOpening.getText());
                         * pst.setString(5, TextName.getText()); pst.addBatch();
                         * pst.executeBatch();
                         *
                         */
                        stm.executeUpdate(sql);
                        JOptionPane.showMessageDialog(null, "Record Updated ");
                        ButtonRefresh.doClick();
                        click="";
                         TextName.setEnabled(false);
                        TextName.setText("");
                         TextAlias.setEnabled(false);
                        TextAlias.setText("");
                         TextNarration.setEnabled(false);
                        TextNarration.setText("");
                        TextCost.setEnabled(false);
                        TextCost.setText("");
                        TextReorder.setEnabled(false);
                        TextReorder.setText("");
                        TextOpening.setEnabled(false);
                        TextOpening.setText("");

                    } catch (SQLException ex) {
                         JOptionPane.showMessageDialog(null, "Error occured."+ex);
                       // Logger.getLogger(RawMaterials.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            pst.close();
                            rs.close();
                        } catch (SQLException ex) {
                            Logger.getLogger(RawMaterials.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Enter value for " + PaneLabel);
                }
            }
        } else if (click.equals("add")) {
            if (TextName.isEnabled() == true && TextCost.isEnabled() == true && TextReorder.isEnabled() == true && TextOpening.isEnabled() == true) {
                if (TextName.getText().equals("")) {
                    PaneLabel = "Item Name";
                }
                if (TextCost.getText().equals("")) {
                    PaneLabel = "Item Cost";
                }
                if (TextReorder.getText().equals("")) {
                    PaneLabel = "Item Reorder quantity";
                }
                if (TextOpening.getText().equals("")) {
                    PaneLabel = "Item Opening Stock";
                }
                if (PaneLabel.equals("")) {
                    String sql = "Insert into RawMaterials values( '" + TextName.getText() + "',round('" + TextCost.getText() + "',2),round('" + TextReorder.getText() + "',2),round('" + TextOpening.getText()+"',2),'"+ TextAlias.getText()+"','"+ TextNarration.getText() + "',round('" + TextOpening.getText() + "',2))";
                    try {
                        Statement stm = conn.createStatement();
                        //pst = conn.prepareStatement(sql);
                     /*
                         * pst.setString(1, TextName.getText());
                         * pst.setString(2, TextCost.getText());
                         * pst.setString(3, TextReorder.getText());
                         * pst.setString(4, TextOpening.getText());
                         * pst.setString(5, TextName.getText()); pst.addBatch();
                         * pst.executeBatch();
                         *
                         */
                        stm.executeUpdate(sql);
                        JOptionPane.showMessageDialog(null, "Record Added ");
                        ButtonRefresh.doClick();
                         TextName.setEnabled(false);
                        TextName.setText("");
                        TextCost.setEnabled(false);
                        TextCost.setText("");
                        TextReorder.setEnabled(false);
                        TextReorder.setText("");
                         TextAlias.setEnabled(false);
                        TextAlias.setText("");
                         TextNarration.setEnabled(false);
                        TextNarration.setText("");
                        TextOpening.setEnabled(false);
                        TextOpening.setText("");

                    } catch (SQLException ex) {
                         JOptionPane.showMessageDialog(null, "Error occured."+ex);
                       // Logger.getLogger(RawMaterials.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            pst.close();
                            rs.close();
                        } catch (SQLException ex) {
                            Logger.getLogger(RawMaterials.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Enter value for " + PaneLabel);
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
this.dispose();
       // this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void TextAliasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextAliasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextAliasActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        CreateConnection.DeleteAll("RawMaterials", conn);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
int a=evt.getKeyCode();
if(a==10){
            try {
                Robot robot= new Robot();
                robot.keyPress(KeyEvent.VK_SPACE);
                robot.keyRelease(KeyEvent.VK_SPACE);
            } catch (AWTException ex) {
                Logger.getLogger(OutTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }
}        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2KeyPressed

    private void ButtonAddKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ButtonAddKeyPressed
int a=evt.getKeyCode();
if(a==10){
            try {
                Robot robot= new Robot();
                robot.keyPress(KeyEvent.VK_SPACE);
                robot.keyRelease(KeyEvent.VK_SPACE);
            } catch (AWTException ex) {
                Logger.getLogger(OutTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }
}else if(a==27){
            jButton2.doClick();
        }
        else if(a == 113){
            jButton1.doClick();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonAddKeyPressed

    private void ButtonEditKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ButtonEditKeyPressed
int a=evt.getKeyCode();
if(a==10){
            try {
                Robot robot= new Robot();
                robot.keyPress(KeyEvent.VK_SPACE);
                robot.keyRelease(KeyEvent.VK_SPACE);
            } catch (AWTException ex) {
                Logger.getLogger(OutTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }
}else if(a==27){
            jButton2.doClick();
        }
        else if(a == 113){
            jButton1.doClick();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonEditKeyPressed

    private void ButtonDeleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ButtonDeleteKeyPressed
int a=evt.getKeyCode();
if(a==10){
            try {
                Robot robot= new Robot();
                robot.keyPress(KeyEvent.VK_SPACE);
                robot.keyRelease(KeyEvent.VK_SPACE);
            } catch (AWTException ex) {
                Logger.getLogger(OutTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }
}else if(a==27){
            jButton2.doClick();
        }
        else if(a == 113){
            jButton1.doClick();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonDeleteKeyPressed

    private void ButtonClearKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ButtonClearKeyPressed
int a=evt.getKeyCode();
if(a==10){
            try {
                Robot robot= new Robot();
                robot.keyPress(KeyEvent.VK_SPACE);
                robot.keyRelease(KeyEvent.VK_SPACE);
            } catch (AWTException ex) {
                Logger.getLogger(OutTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }
}else if(a==27){
            jButton2.doClick();
        }
        else if(a == 113){
            jButton1.doClick();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonClearKeyPressed

    private void ButtonRefreshKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ButtonRefreshKeyPressed
int a=evt.getKeyCode();
if(a==10){
            try {
                Robot robot= new Robot();
                robot.keyPress(KeyEvent.VK_SPACE);
                robot.keyRelease(KeyEvent.VK_SPACE);
            } catch (AWTException ex) {
                Logger.getLogger(OutTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }
}else if(a==27){
            jButton2.doClick();
        }
        else if(a == 113){
            jButton1.doClick();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonRefreshKeyPressed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
int a=evt.getKeyCode();
if(a==10){
            try {
                Robot robot= new Robot();
                robot.keyPress(KeyEvent.VK_SPACE);
                robot.keyRelease(KeyEvent.VK_SPACE);
            } catch (AWTException ex) {
                Logger.getLogger(OutTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }
} else if(a==27){
            jButton2.doClick();
        }
        else if(a == 113){
            jButton1.doClick();
        }       // TODO add your handling code here:
    }//GEN-LAST:event_jButton1KeyPressed

    private void jButton6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton6KeyPressed
int a=evt.getKeyCode();
if(a==10){
            try {
                Robot robot= new Robot();
                robot.keyPress(KeyEvent.VK_SPACE);
                robot.keyRelease(KeyEvent.VK_SPACE);
            } catch (AWTException ex) {
                Logger.getLogger(OutTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }
}        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6KeyPressed

    private void TextNarrationKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextNarrationKeyPressed
        int a=evt.getKeyCode(); 
     if(a==9){
     jButton1.grabFocus();
     }else if(a==27){
            jButton2.doClick();
        }
        else if(a == 113){
            jButton1.doClick();
        }
    }//GEN-LAST:event_TextNarrationKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
 int a = evt.getKeyCode();
         if(a==27){
            jButton2.doClick();
        }
        else if(a == 113){
            jButton1.doClick();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void TextNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextNameKeyPressed
 int a = evt.getKeyCode();
         if(a==27){
            jButton2.doClick();
        }
        else if(a == 113){
            jButton1.doClick();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_TextNameKeyPressed

    private void TextAliasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextAliasKeyPressed
 int a = evt.getKeyCode();
         if(a==27){
            jButton2.doClick();
        }
        else if(a == 113){
            jButton1.doClick();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_TextAliasKeyPressed

    private void TextCostKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextCostKeyPressed
 int a = evt.getKeyCode();
         if(a==27){
            jButton2.doClick();
        }
        else if(a == 113){
            jButton1.doClick();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_TextCostKeyPressed

    private void TextReorderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextReorderKeyPressed
 int a = evt.getKeyCode();
         if(a==27){
            jButton2.doClick();
        }
        else if(a == 113){
            jButton1.doClick();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_TextReorderKeyPressed

    private void TextOpeningKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextOpeningKeyPressed
 int a = evt.getKeyCode();
         if(a==27){
            jButton2.doClick();
        }
        else if(a == 113){
            jButton1.doClick();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_TextOpeningKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RawMaterials.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RawMaterials.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RawMaterials.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RawMaterials.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                RawMaterials dialog = new RawMaterials(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAdd;
    private javax.swing.JButton ButtonClear;
    private javax.swing.JButton ButtonDelete;
    private javax.swing.JButton ButtonEdit;
    private javax.swing.JButton ButtonRefresh;
    private javax.swing.JTable Table;
    private javax.swing.JTextField TextAlias;
    private javax.swing.JTextField TextCost;
    private javax.swing.JTextField TextName;
    private javax.swing.JTextArea TextNarration;
    private javax.swing.JTextField TextOpening;
    private javax.swing.JTextField TextReorder;
    private javax.swing.JTextField TextSearch;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
