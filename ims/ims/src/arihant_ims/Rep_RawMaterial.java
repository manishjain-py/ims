/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package arihant_ims;

import java.awt.AWTException;
import java.awt.Dimension;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;

/**
 *
 * @author admin
 */
public class Rep_RawMaterial extends javax.swing.JDialog {

    Connection conn;
    PreparedStatement pst;
    ResultSet rs;
    private Object txtdayReportDateChooser;

    public Rep_RawMaterial(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        go_btn.setVisible(false);
        conn = CreateConnection.connectDB();

        Dimension scrn = getToolkit().getScreenSize();
        this.setBounds(0, 0, scrn.width, scrn.height);
        ComboRecipeName.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        FromDatechooser = new com.toedter.calendar.JDateChooser();
        ToDatechooser = new com.toedter.calendar.JDateChooser();
        txtFromDate = new javax.swing.JTextField();
        txtToDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnGo = new javax.swing.JButton();
        ComboItemName = new javax.swing.JComboBox();
        radioRawMaterials = new javax.swing.JRadioButton();
        radioFinishedGoods = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        btnRawMaterial = new javax.swing.JButton();
        btnFinishedGoods = new javax.swing.JButton();
        btnSuppliers = new javax.swing.JButton();
        btnCustomers = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        butTranscationOut = new javax.swing.JButton();
        butTranscationIN = new javax.swing.JButton();
        butProduction = new javax.swing.JButton();
        dayReportDateChooser = new com.toedter.calendar.JDateChooser();
        txtDayReport = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        btnRecipe = new javax.swing.JButton();
        ComboRecipeName = new javax.swing.JComboBox();
        go_btn = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        TextRM = new javax.swing.JTextField();
        RMDateChooser = new com.toedter.calendar.JDateChooser();
        jButton9 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("PRINT TABLE DATA");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        FromDatechooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                FromDatechooserPropertyChange(evt);
            }
        });

        ToDatechooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                ToDatechooserPropertyChange(evt);
            }
        });

        txtFromDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFromDateActionPerformed(evt);
            }
        });

        txtToDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtToDateActionPerformed(evt);
            }
        });

        jLabel1.setText("TO");

        btnGo.setText("GO");
        btnGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoActionPerformed(evt);
            }
        });

        ComboItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboItemNameActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioRawMaterials);
        radioRawMaterials.setText("Raw Material");
        radioRawMaterials.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioRawMaterialsActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioFinishedGoods);
        radioFinishedGoods.setText("Finished Goods");
        radioFinishedGoods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioFinishedGoodsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radioRawMaterials, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radioFinishedGoods)
                    .addComponent(ComboItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FromDatechooser, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ToDatechooser, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jLabel1)))
                .addGap(12, 12, 12)
                .addComponent(btnGo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FromDatechooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(radioRawMaterials)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnGo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(radioFinishedGoods)
                        .addGap(16, 16, 16)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtToDate, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(ToDatechooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboItemName))
                .addGap(25, 25, 25))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btnRawMaterial.setText("RAW MATERIALS");
        btnRawMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRawMaterialActionPerformed(evt);
            }
        });

        btnFinishedGoods.setText("FINISHED GOODS");
        btnFinishedGoods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishedGoodsActionPerformed(evt);
            }
        });

        btnSuppliers.setText("SUPPLIERS");
        btnSuppliers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuppliersActionPerformed(evt);
            }
        });

        btnCustomers.setText("CUSTOMERS");
        btnCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomersActionPerformed(evt);
            }
        });

        jButton3.setText("Reorder Items");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Short & Excess");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Packaging");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(btnRawMaterial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnFinishedGoods)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSuppliers, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRawMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFinishedGoods, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuppliers, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        butTranscationOut.setText("Transcation Out");
        butTranscationOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTranscationOutActionPerformed(evt);
            }
        });

        butTranscationIN.setText("Transcation IN");
        butTranscationIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTranscationINActionPerformed(evt);
            }
        });

        butProduction.setText("Production");
        butProduction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butProductionActionPerformed(evt);
            }
        });

        dayReportDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dayReportDateChooserPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(txtDayReport, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(dayReportDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(butTranscationIN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(butTranscationOut, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(butProduction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dayReportDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDayReport, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(butTranscationIN, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(butTranscationOut, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(butProduction, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btnRecipe.setText("Recipe");
        btnRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecipeActionPerformed(evt);
            }
        });

        ComboRecipeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboRecipeNameActionPerformed(evt);
            }
        });

        go_btn.setText("Go");
        go_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                go_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRecipe, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addComponent(ComboRecipeName, 0, 148, Short.MAX_VALUE)
                    .addComponent(go_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRecipe, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboRecipeName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(go_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton5.setText("EXPORT TO EXCEL");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("<html><h1>HOME");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jButton6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton6KeyPressed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton7.setText("List Raw Materials");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        TextRM.setEditable(false);
        TextRM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextRMActionPerformed(evt);
            }
        });

        RMDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                RMDateChooserPropertyChange(evt);
            }
        });

        jButton9.setText("List Finished Goods");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(TextRM, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RMDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RMDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(TextRM, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1146, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(34, 34, 34)
                                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String query = "Select itemName , 'rawmaterial'as category , reorder , openingStock as Available from RawMaterials where openingStock <=reorder  UNION Select itemName , 'FinishedGoods'as category , reorder , openingStock as Available from FinishedGoods where openingStock <=reorder order by category ";
        queryToTable(query);
    }//GEN-LAST:event_jButton3ActionPerformed

    void queryToTable(String query) {

        try {
            pst = conn.prepareStatement(query);
            rs = pst.executeQuery();
            if (rs.isBeforeFirst()) {

                jTable1.setModel(C.getModel(rs));
            } else {
                JOptionPane.showMessageDialog(null, "Sorry , No Records found");
                jTable1.setModel(C.getModel(rs));
            }
        } catch (Exception ex) {
            Logger.getLogger(Rep_RawMaterial.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                pst.close();
                rs.close();
            } catch (Exception ex) {
            }
        }
    }

    private void btnRawMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRawMaterialActionPerformed
        String query = "Select itemName as Name,itemAlias as Alias, round(cost,2) as Cost, round(openingStock,2) as 'Current Stock',initialStock as 'Opening Stock',reorder as Reorder  from RawMaterials";
        queryToTable(query);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRawMaterialActionPerformed

//    public void changeToCSV() {
//        JTable model;
//        int m = model.getColumnCount();
//        int n = model.getRowCount();
//
//        for (int i = 0; i < n; i++) {
//            StringBuilder builder = new StringBuilder();
//            for (int j = 0; j < m; j++) {
//                append(model.getValue(i, j));
//                if (j + 1 < m) {
//                    builder.append(",");
//                }
//            }
//            writer.println(builder.toString());
//        }
//
//
//    }
    private void append(StringBuilder builder, Object value) {
        builder.append('\"');
        if (value != null) {
            builder.append(value.toString());
        }
        builder.append('\"');
    }

    public void printcsvfile(TableModel model) {

        int m = model.getColumnCount();
        for (int i = 0; i < m; i++) {
            System.out.print(model.getColumnName(i));
            System.out.print(",");
        }
        System.out.print("\n");
        int n = model.getRowCount();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(model.getValueAt(i, j).toString());
                System.out.print(",");
            }
            System.out.print("\n");
        }
    }

    public String dataToPutInFile(TableModel model) {
        String str = "";
        int m = model.getColumnCount();
        for (int i = 0; i < m; i++) {
            str = str + model.getColumnName(i);
            str = str + ",";
        }
        str = str + "\n";
        int n = model.getRowCount();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                str = str + model.getValueAt(i, j).toString();
                str = str + ",";
            }
            str = str + "\n";
        }
        return str;
    }

    private void filler_recipe() {
        // ComboRecipeName.setVisible(true);
        try {

            PreparedStatement temppst = conn.prepareStatement("select * from Recipe order by recipeeName");
            ResultSet temprs = temppst.executeQuery();
            while (temprs.next()) {
                ComboRecipeName.addItem(temprs.getString("recipeeName"));
                //if(temprs.getString("recipeeAlias")!=null && !temprs.getString("recipeeAlias").equals(""))
                //ComboRecipeName.addItem(temprs.getString("recipeeAlias"));
            }
            temppst.close();
            temprs.close();
        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, e);
            Logger.getLogger(Recipe.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    public void writeAsCSV(TableModel model, OutputStream os)
            throws IOException {
        PrintWriter writer = new PrintWriter(os);

        int m = model.getColumnCount();
        int n = model.getRowCount();

        for (int i = 0; i < n; i++) {
            StringBuilder builder = new StringBuilder();
            for (int j = 0; j < m; j++) {
                append(builder, model.getValueAt(i, j));
                if (j + 1 < m) {
                    builder.append(",");
                }
            }
            writer.println(builder.toString());
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            jTable1.print();

        } catch (Exception e) {
            System.err.println("Error printing: " + e.getMessage());
        }          // TODO add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnFinishedGoodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishedGoodsActionPerformed
        String query = "Select itemName as Name,itemAlias as Alias, round(cost,2) as Cost, round(openingStock,2) as 'Current Stock',round(initialStock,2) as 'Opening Stock',reorder as Reorder  from FinishedGoods";
        queryToTable(query);
    }//GEN-LAST:event_btnFinishedGoodsActionPerformed

    private void btnCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomersActionPerformed
        String query = "Select *  from Customers";
        queryToTable(query);
    }//GEN-LAST:event_btnCustomersActionPerformed

    private void btnSuppliersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuppliersActionPerformed
        String query = "Select *  from Suppliers";
        queryToTable(query);
    }//GEN-LAST:event_btnSuppliersActionPerformed

    private void btnRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecipeActionPerformed

        ComboRecipeName.setVisible(true);
        go_btn.setVisible(true);
        ComboRecipeName.addItem("select");
        filler_recipe();
    }//GEN-LAST:event_btnRecipeActionPerformed

    private void ComboRecipeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboRecipeNameActionPerformed
    }//GEN-LAST:event_ComboRecipeNameActionPerformed

    private void ComboItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboItemNameActionPerformed
    }//GEN-LAST:event_ComboItemNameActionPerformed

    private void radioRawMaterialsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioRawMaterialsActionPerformed
        ComboItemName.removeAllItems();
        filler_rawMaterial();
    }//GEN-LAST:event_radioRawMaterialsActionPerformed

    private void radioFinishedGoodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioFinishedGoodsActionPerformed
        ComboItemName.removeAllItems();
        filler_finishedGoods();
    }//GEN-LAST:event_radioFinishedGoodsActionPerformed

    private void FromDatechooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_FromDatechooserPropertyChange
        SimpleDateFormat formatter1 = new SimpleDateFormat("yyyy-MM-dd");
        Calendar obj = FromDatechooser.getCalendar();
        String dateNow = "";
        if (obj != null) {
            dateNow = formatter1.format(obj.getTime());
        }
        txtFromDate.setText(dateNow);
    }//GEN-LAST:event_FromDatechooserPropertyChange

    private void ToDatechooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_ToDatechooserPropertyChange
        SimpleDateFormat formatter1 = new SimpleDateFormat("yyyy-MM-dd");
        Calendar obj = ToDatechooser.getCalendar();
        String dateNow = "";
        if (obj != null) {
            dateNow = formatter1.format(obj.getTime());
        }
        //System.out.println(dateNow1);
        txtToDate.setText(dateNow);
    }//GEN-LAST:event_ToDatechooserPropertyChange

    public int calcproduction(String item, String sdate) {
        List details = getProductionDetails(item, sdate);
        //Iterator itr = details.iterator();
        int i = 0;
        int x[] = (int[]) details.get(0);//qty
        String y[] = (String[]) details.get(1);//date
        String z[] = (String[]) details.get(2);//name
        int qty = 0;
        while (y[i] != null) {
            qty = qty + x[i];
            //System.out.println(x[i]);
            //System.out.println(y[i]);
            //System.out.println(z[i]);
            i++;
        }
        return qty;
    }

    public int calcproduction(String item, String sdate, String edate) {
        List details = getProductionDetails(item, sdate, edate);
        //Iterator itr = details.iterator();
        int i = 0;
        int x[] = (int[]) details.get(0);
        String y[] = (String[]) details.get(1);
        String z[] = (String[]) details.get(2);
        int qty = 0;
        CreateConnection.DeleteAll1("ProdTemp", conn);
        while (y[i] != null) { 
            String query = "Insert into ProdTemp values( '"
                    + y[i] + "','"
                    + z[i] + "'," + x[i] + ")";
            //System.out.print(query);
            try {
                pst = conn.prepareStatement(query);
                pst.executeUpdate();

            } catch (Exception e) {
                Logger.getLogger(EditRecipe.class.getName()).log(Level.SEVERE, null, e);
                //JOptionPane.showMessageDialog(null, "i am "+e);
            } finally {
                try {
                    pst.close();
                    //rs.close();
                } catch (SQLException ex) {
                    Logger.getLogger(EditRecipe.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            qty = qty + x[i];
            i++;
        }
        return qty;
    }
  public static float Round(float Rval, int Rpl) {
    float p = (float)Math.pow(10,Rpl);
    Rval = Rval * p;
    float tmp = Math.round(Rval);
    return (float)tmp/p;
  }
    private void btnGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoActionPerformed
        if (!(ComboItemName.getSelectedItem().toString().equals("select"))) {
            if (!(txtFromDate.getText().equals("")) && !(txtFromDate.getText().equals(null)) && !(txtToDate.getText().equals("")) && !(txtToDate.getText().equals(null))) {
                String iname = ComboItemName.getSelectedItem().toString();
                String sdate = txtFromDate.getText();
                String edate = txtToDate.getText();
                int j = 0;
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    java.util.Date d1 = sdf.parse(sdate);
                    java.util.Date d2 = sdf.parse(edate);

                    if (d1.before(d2)) {
                        //System.out.println("d1 is before d2");
                    } else if (d1.after(d2)) {
                        j = 1;
                        //System.out.println("d1 is after d2");
                    } else {
                        // System.out.println("d1 is equal to d2");
                    }
                } catch (Exception e) {
                }

                if (j == 1) {
                    JOptionPane.showMessageDialog(null, "End date is less than Start date");
                } else {
                    double initialstock = 0;
                    double openingStock = 0, closingStock = 0;
                    int sumTranIn = 0;
                    int sumTranOut = 0, sumProduction = 0;
                    int shorted = 0;
                    int excessed = 0;
                    int UsedInProduction = 0;
                    if (radioRawMaterials.isSelected()) {
                        try {
                            // calculation of opening stock
                            PreparedStatement pst = conn.prepareStatement("select initialStock from RawMaterials where itemName = '" + iname + "'");
                            ResultSet rs = pst.executeQuery();
                            if (rs.next()) {
                                initialstock = rs.getDouble("initialStock");
                                // JOptionPane.showMessageDialog(null,initialstock);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from transactionsIN where tdate < '" + sdate + "' and item = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                sumTranIn = rs.getInt("sum");
                                //JOptionPane.showMessageDialog(null,sumTranIn);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from transactionsOut where tdate < '" + sdate + "' and item = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                sumTranOut = rs.getInt("sum");
                                //JOptionPane.showMessageDialog(null,sumTranOut);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from ShortAndExcess where date < '" + sdate + "' and typeofdifference = 'Short' and itemName = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                shorted = rs.getInt("sum");
                                //JOptionPane.showMessageDialog(null,"short"+shorted);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from ShortAndExcess where date < '" + sdate + "' and typeofdifference = 'Excess' and itemName = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                excessed = rs.getInt("sum");
                                //JOptionPane.showMessageDialog(null,"excess"+excessed);
                            }
                            rs.close();
                            pst.close();
                            sumProduction = calcproduction(iname, sdate);
                            //JOptionPane.showMessageDialog(null,sumProduction);
                            openingStock = initialstock + sumTranIn - sumTranOut + excessed - shorted - sumProduction;
                            //JOptionPane.showMessageDialog(null,openingStock);

                            //calculation of closing stock
                            pst = conn.prepareStatement("select sum(quantity) as sum from transactionsIN where tdate >='" + sdate + "' and tdate<='" + edate + "' and item = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                sumTranIn = rs.getInt("sum");
                                //JOptionPane.showMessageDialog(null,sumTranIn);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from transactionsOut where tdate >= '" + sdate + "'  and tdate<='" + edate + "' and item = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                sumTranOut = rs.getInt("sum");
                                //JOptionPane.showMessageDialog(null,sumTranOut);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from ShortAndExcess where date >= '" + sdate + "'  and date<='" + edate + "' and typeofdifference = 'Short' and itemName = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                shorted = rs.getInt("sum");
                                //JOptionPane.showMessageDialog(null,shorted);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from ShortAndExcess where date >= '" + sdate + "'  and date<='" + edate + "' and typeofdifference = 'Excess' and itemName = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                excessed = rs.getInt("sum");
                                //JOptionPane.showMessageDialog(null,excessed);
                            }
                            rs.close();
                            pst.close();
                            sumProduction = calcproduction(iname, sdate, edate);
                            //JOptionPane.showMessageDialog(null,sumProduction);
                            closingStock = openingStock + sumTranIn - sumTranOut - shorted + excessed - sumProduction;
                            //JOptionPane.showMessageDialog(null,closingStock);

                        } catch (SQLException ex) {
                            Logger.getLogger(Rep_RawMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        String query = "select ' opening stock: " + Production.RoundTo2Decimals(openingStock) + "' as TransactionType , '' as Date, '' as Item , '' as Quantity , '' as Price , '' as Party , '' as PackagingType , '' as PackagingQuantity , '' as Narration  "
                                + "union select 'Transaction-IN' , tdate , item , round(quantity,2) , round(price,2) , party , packingType , noOfPacking , narration from transactionsIN where tdate >= '" + sdate + "' and tdate <= '" + edate + "'and item = '" + iname + "'"
                                + "union select 'Short' , date , itemName , round(quantity,2), '', '', '', '', '' from ShortAndExcess where date >= '" + sdate + "' and date <= '" + edate + "'and typeofdifference = 'Short' and itemName = '" + iname + "'"
                                + "union select 'Excess' , date , itemName , round(quantity,2), '', '', '', '', '' from ShortAndExcess where date >= '" + sdate + "' and date <= '" + edate + "'and typeofdifference = 'Excess' and itemName = '" + iname + "'"
                                + "union select 'Transaction-OUT' , tdate , item , round(quantity,2) , round(price,2) , party , packingType , noOfPacking , narration from transactionsOut where tdate >= '" + sdate + "' and tdate <= '" + edate + "'and item = '" + iname + "' "
                                + "union select 'Usage Details ' , '' , '' , '' , '' , '' , '' , '' , ''  from transactionsIN  "
                                + "union select 'Used -',date , itemName , round(qty,2) , '' , '' , '' , '' , ''  from ProdTemp  "
                                + "union select 'Used in prod.: " + Production.RoundTo2Decimals(sumProduction) + "' , '' , '' , '' , '' , '' , '' , '' , ''  from transactionsIN  "
                                + "union select 'closing stock: " + Production.RoundTo2Decimals(closingStock) + "' , '' , '' , '' , '' , '' , '' , '' , ''  from transactionsIN  ";

                        queryToTable(query);
                    }
                    if (radioFinishedGoods.isSelected()) {
                        try {
                            PreparedStatement pst = conn.prepareStatement("select initialStock from FinishedGoods where itemName = '" + iname + "'");
                            ResultSet rs = pst.executeQuery();
                            if (rs.next()) {
                                // JOptionPane.showMessageDialog(null, "finishedgoods");
                                initialstock = rs.getDouble("initialStock");
                                System.out.println(initialstock);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from transactionsIN where tdate < '" + sdate + "' and item = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                sumTranIn = rs.getInt("sum");
                                //JOptionPane.showMessageDialog(null,sumTranIn);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from Production where date < '" + sdate + "' and recipename = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                sumProduction = rs.getInt("sum");
                                System.out.println(sumProduction);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from ShortAndExcess where date < '" + sdate + "'and typeofdifference = 'Short' and itemName = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                shorted = rs.getInt("sum");
                                // System.out.println(sumTranOut);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from ShortAndExcess where date < '" + sdate + "'and typeofdifference = 'Excess' and itemName = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                excessed = rs.getInt("sum");
                                // System.out.println(sumTranOut);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from transactionsOut where tdate < '" + sdate + "' and item = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                sumTranOut = rs.getInt("sum");
                                System.out.println(sumTranOut);
                            }
                            rs.close();
                            pst.close();
                            UsedInProduction = calcproduction(iname, sdate);
                            //JOptionPane.showMessageDialog(null,UsedInProduction);
                            //openingStock = sumProduction - sumTranOut;
                            openingStock = initialstock;
                            openingStock = openingStock + sumProduction - UsedInProduction - sumTranOut + sumTranIn + excessed - shorted;
                            System.out.println(openingStock);

                            //calculation of closing stock
                            pst = conn.prepareStatement("select sum(quantity) as sum from transactionsIN where tdate >='" + sdate + "' and tdate<='" + edate + "' and item = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                sumTranIn = rs.getInt("sum");
                                //JOptionPane.showMessageDialog(null,sumTranIn);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from Production where date >='" + sdate + "' and date<='" + edate + "' and Recipename = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                sumProduction = rs.getInt("sum");
                                System.out.println(sumProduction);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from transactionsOut where tdate >= '" + sdate + "'  and tdate<='" + edate + "' and item = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                sumTranOut = rs.getInt("sum");
                                System.out.println(sumTranOut);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from ShortAndExcess where date >= '" + sdate + "'  and date<='" + edate + "' and typeofdifference = 'Short' and itemName = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                shorted = rs.getInt("sum");
                                //JOptionPane.showMessageDialog(null,shorted);
                            }
                            rs.close();
                            pst.close();
                            pst = conn.prepareStatement("select sum(quantity) as sum from ShortAndExcess where date >= '" + sdate + "'  and date<='" + edate + "' and typeofdifference = 'Excess' and itemName = '" + iname + "'");
                            rs = pst.executeQuery();
                            if (rs.next()) {
                                excessed = rs.getInt("sum");
                                //JOptionPane.showMessageDialog(null,excessed);
                            }
                            rs.close();
                            pst.close();
                            UsedInProduction = calcproduction(iname, sdate, edate);
                            //JOptionPane.showMessageDialog(null,UsedInProduction);
                            closingStock = openingStock + sumProduction - UsedInProduction - sumTranOut + sumTranIn + excessed - shorted;
                            System.out.println(closingStock);

                        } catch (SQLException ex) {
                            Logger.getLogger(Rep_RawMaterial.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        String query = "select ' opening stock: " + Production.RoundTo2Decimals(openingStock) + "' as TransactionType , '' as Date, '' as Item , '' as Quantity , '' as Price  "
                                + "union select 'Production' , date , recipename , round(quantity,2) , round(cost,2) from Production where date >= '" + sdate + "' and date <= '" + edate + "'and recipename = '" + iname + "'"
                                + "union select 'Short' , date , itemName , round(quantity,2), '' from ShortAndExcess where date >= '" + sdate + "' and date <= '" + edate + "'and typeofdifference = 'Short' and itemName = '" + iname + "'"
                                + "union select 'Excess' , date , itemName , round(quantity,2), '' from ShortAndExcess where date >= '" + sdate + "' and date <= '" + edate + "'and typeofdifference = 'Excess' and itemName = '" + iname + "'"
                                + "union select 'OUT' , tdate , item , round(quantity,2) , round(price,2)  from transactionsOut where tdate >= '" + sdate + "' and tdate <= '" + edate + "'and item = '" + iname + "' "
                                + "union select 'In' , tdate , item , round(quantity,2) , round(price,2)  from transactionsIn where tdate >= '" + sdate + "' and tdate <= '" + edate + "'and item = '" + iname + "' "
                                + "union select 'Usage Details ' , '' , '' , '' , ''  from transactionsIN  "
                                + "union select 'Used -',date , itemName , round(qty,2) , ''  from ProdTemp  "
                                + "union select 'Used in production: " + Production.RoundTo2Decimals(UsedInProduction) + "' , '' , '' , '' , ''  "
                                + "union select 'closing stock: " + Production.RoundTo2Decimals(closingStock) + "' , '' , '' , '' , '' ";

                        queryToTable(query);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please choose the date");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select an item");
        }
    }//GEN-LAST:event_btnGoActionPerformed

    private void txtFromDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFromDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFromDateActionPerformed

    private void dayReportDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dayReportDateChooserPropertyChange
        SimpleDateFormat formatter1 = new SimpleDateFormat("yyyy-MM-dd");
        Calendar obj = dayReportDateChooser.getCalendar();
        String dateNow = "";
        if (obj != null) {
            dateNow = formatter1.format(obj.getTime());
        }
        txtDayReport.setText(dateNow);
    }//GEN-LAST:event_dayReportDateChooserPropertyChange

    private void butTranscationINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTranscationINActionPerformed
        String date = txtDayReport.getText();
        if (!(txtDayReport.getText().equals("")) && !(txtDayReport.getText().equals(null))) {
            String query = "Select tdate as Date , item as Item , round(quantity,2) as Quantity , round(price,2) as Price, party as Party , packingType as Packaging_Type, noOfPacking as Packaging_Quantity,narration from transactionsIN where tdate = '" + date + "'";
            queryToTable(query);
        } else {
            JOptionPane.showMessageDialog(null, "Please choose the date");
        }
    }//GEN-LAST:event_butTranscationINActionPerformed

    private void butTranscationOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTranscationOutActionPerformed
        String date = txtDayReport.getText();
        if (!(txtDayReport.getText().equals("")) && !(txtDayReport.getText().equals(null))) {
            String query = "Select tdate as Date , item as Item , round(quantity,2) as Quantity , round(price,2) as Price, party as Party , packingType as Packaging_Type, noOfPacking as Packaging_Quantity,narration from transactionsOut where tdate = '" + date + "'";
            queryToTable(query);
        } else {
            JOptionPane.showMessageDialog(null, "Please choose the date");
        }
    }//GEN-LAST:event_butTranscationOutActionPerformed

    private void butProductionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butProductionActionPerformed
        String date = txtDayReport.getText();
        if (!(txtDayReport.getText().equals("")) && !(txtDayReport.getText().equals(null))) {
            String query = "Select date as Date , recipename as Item , round(quantity,2) as Quantity , round(cost,2) from Production where date = '" + date + "'";
            queryToTable(query);
        } else {
            JOptionPane.showMessageDialog(null, "Please choose the date");
        }
    }//GEN-LAST:event_butProductionActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String query = "Select * from ShortAndExcess";
        queryToTable(query);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtToDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtToDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtToDateActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        printcsvfile(jTable1.getModel());
        String data = dataToPutInFile(jTable1.getModel());
        putDataToFile(data);
        System.out.print(data);
        String runBatPath = "tempReport.csv";
        try {
            Process p = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", runBatPath});
            // p.waitFor();
        } catch (IOException ex) {
            //Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:

        //   FileOutputStream fos;
//        try {
//           // fos = new FileOutputStream("c://filename.csv");
//            //writeAsCSV(jTable1.getModel(), fos);
//            //fos.close();
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(Rep_RawMaterial.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(Rep_RawMaterial.class.getName()).log(Level.SEVERE, null, ex);
//        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton6KeyPressed
        int a = evt.getKeyCode();
        if (a == 10) {
            try {
                Robot robot = new Robot();
                robot.keyPress(KeyEvent.VK_SPACE);
                robot.keyRelease(KeyEvent.VK_SPACE);
            } catch (AWTException ex) {
                Logger.getLogger(OutTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6KeyPressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String query = "Select * from Packing";
        queryToTable(query);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
    public List getRMStatus(String item, String sdate) {
        List l = new ArrayList();
        double itemqty = 0;
        double itemprice = 0;
        String iname = item;
        double initialstock = 0;
        double openingStock = 0;
        int sumTranIn = 0;
        int sumTranOut = 0, sumProduction = 0;
        int shorted = 0;
        int excessed = 0;
        try {
            // calculation of opening stock
            PreparedStatement pst = conn.prepareStatement("select initialStock from RawMaterials where itemName = '" + iname + "'");
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                initialstock = rs.getDouble("initialStock");
                //JOptionPane.showMessageDialog(null,initialstock);
            }
            rs.close();
            pst.close();
            pst = conn.prepareStatement("select sum(quantity) as sum from transactionsIN where tdate <= '" + sdate + "' and item = '" + iname + "'");
            rs = pst.executeQuery();
            if (rs.next()) {
                sumTranIn = rs.getInt("sum");
                //JOptionPane.showMessageDialog(null,sumTranIn);
            }
            rs.close();
            pst.close();
            pst = conn.prepareStatement("select sum(quantity) as sum from transactionsOut where tdate <= '" + sdate + "' and item = '" + iname + "'");
            rs = pst.executeQuery();
            if (rs.next()) {
                sumTranOut = rs.getInt("sum");
                //JOptionPane.showMessageDialog(null,sumTranOut);
            }
            rs.close();
            pst.close();
            pst = conn.prepareStatement("select sum(quantity) as sum from ShortAndExcess where date <= '" + sdate + "' and typeofdifference = 'Short' and itemName = '" + iname + "'");
            rs = pst.executeQuery();
            if (rs.next()) {
                shorted = rs.getInt("sum");
                //JOptionPane.showMessageDialog(null,"short"+shorted);
            }
            rs.close();
            pst.close();
            pst = conn.prepareStatement("select sum(quantity) as sum from ShortAndExcess where date <= '" + sdate + "' and typeofdifference = 'Excess' and itemName = '" + iname + "'");
            rs = pst.executeQuery();
            if (rs.next()) {
                excessed = rs.getInt("sum");
                //JOptionPane.showMessageDialog(null,"excess"+excessed);
            }
            rs.close();
            pst.close();
            sumProduction = calcproduction(iname, sdate);
            //JOptionPane.showMessageDialog(null,sumProduction);
            openingStock = initialstock + sumTranIn - sumTranOut + excessed - shorted - sumProduction;
            itemqty = openingStock;
            //JOptionPane.showMessageDialog(null,"final:"+openingStock);
            pst = conn.prepareStatement("select cost from RawMaterials where itemName = '" + iname + "'");
            rs = pst.executeQuery();
            if (rs.next()) {
                itemprice = rs.getDouble("cost");
                //JOptionPane.showMessageDialog(null,"excess"+excessed);
            }
            rs.close();
            pst.close();
            l.add(iname);
            l.add(itemqty);
            l.add(itemprice);
        } catch (Exception e) {
            Logger.getLogger(Rep_RawMaterial.class.getName()).log(Level.SEVERE, null, e);
        }
        return l;
    }
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String sdate = TextRM.getText();
        if (sdate.equals("")) {
            JOptionPane.showMessageDialog(null, "Please select a date");
        } else {
            List l = new ArrayList();
            String iName[] = new String[500];
            double itemqty[] = new double[500];
            double itemprice[] = new double[500];
            int index = 0;
            String itemName = "";
            try {
                PreparedStatement pst = conn.prepareStatement("select * from RawMaterials");
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    itemName = rs.getString("itemName");
                    //JOptionPane.showMessageDialog(null,itemName);
                    l = getRMStatus(itemName, sdate);
                    iName[index] = (String) l.get(0);
                    itemqty[index] = (Double) l.get(1);
                    itemprice[index] = (Double) l.get(2);
                    index++;
                }
                List finalList = new ArrayList();
                finalList.add(iName);
                finalList.add(itemqty);
                finalList.add(itemprice);
                showTempListInTable(finalList);
                pst.close();
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(Rep_RawMaterial.class.getName()).log(Level.SEVERE, null, ex);
            }
        }// TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed
    void showTempListInTable(List details1) {
//List details1  = details;
        double price1[] = (double[]) details1.get(2);
        String item1[] = (String[]) details1.get(0);
        double quantity1[] = (double[]) details1.get(1);
        CreateConnection.DeleteAll1("TEMP", conn);
        int i = 0;
        String query = "";
        while (item1[i] != null) {

            String tempItem = item1[i];
            double tempPrice = price1[i];
            double tempQuantity = quantity1[i];

            query = "Insert into TEMP values( '"
                    + tempItem + "','"
                    + tempPrice + "','" + tempQuantity + "','" + 0 + "')";
           // JOptionPane.showMessageDialog(null, "i am ");
            // System.out.print(query);
            try {
                pst = conn.prepareStatement(query);
                pst.executeUpdate();

            } catch (Exception e) {
                Logger.getLogger(EditRecipe.class.getName()).log(Level.SEVERE, null, e);
                //JOptionPane.showMessageDialog(null, "i am "+e);
            } finally {
                try {
                    pst.close();
                    //rs.close();
                } catch (SQLException ex) {
                    Logger.getLogger(EditRecipe.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            i++;
        }



        String sql = "Update TEMP set amount= round(price*quantity,2)";
        try {
            Statement stm = conn.createStatement();
            stm.executeUpdate(sql);

        } catch (Exception e) {
            System.out.print("exception");
        }

        double amt = 0, qt = 0, pr = 0;
        try {
            pst = conn.prepareStatement("select round(sum(price),2),round(sum(quantity),2),round(sum(amount),2) from TEMP");
            rs = pst.executeQuery();
            if (rs.next()) {
                amt = rs.getDouble(3);
                pr = rs.getDouble(1);
                qt = rs.getDouble(2);
            }

        } catch (Exception e) {
            Logger.getLogger(EditRecipe.class.getName()).log(Level.SEVERE, null, e);
            //JOptionPane.showMessageDialog(null, "i am "+e);
        } finally {
            try {
                pst.close();
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(EditRecipe.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        pr = 0;
        qt = 0;
        query = "Insert into TEMP values('Total'," + pr + "," + qt + "," + amt + ")";
        //JOptionPane.showMessageDialog(null, "i am 2");
        System.out.print(query);
        try {
            pst = conn.prepareStatement(query);
            pst.executeUpdate();

        } catch (Exception e) {
            Logger.getLogger(EditRecipe.class.getName()).log(Level.SEVERE, null, e);
            //JOptionPane.showMessageDialog(null, "i am "+e);
        } finally {
            try {
                pst.close();
                //rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(EditRecipe.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


        query = "Select * from TEMP";

        queryToTable(query);
    }
    private void TextRMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextRMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextRMActionPerformed

    private void RMDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_RMDateChooserPropertyChange
        SimpleDateFormat formatter1 = new SimpleDateFormat("yyyy-MM-dd");
        Calendar obj = RMDateChooser.getCalendar();
        String dateNow = "";
        if (obj != null) {
            dateNow = formatter1.format(obj.getTime());
        }
        TextRM.setText(dateNow);        // TODO add your handling code here:
    }//GEN-LAST:event_RMDateChooserPropertyChange
    public List getFGStatus(String item, String sdate) {
        List l = new ArrayList();
        double itemqty = 0;
        double itemprice = 0;
        String iname = item;
        double initialstock = 0;
        double openingStock = 0;
        int sumTranOut = 0, sumProduction = 0;
        int sumTranIn = 0;
        int shorted = 0;
        int excessed = 0;
        int UsedInProduction = 0;
        try {
            // calculation of opening stock
            PreparedStatement pst = conn.prepareStatement("select initialStock from FinishedGoods where itemName = '" + iname + "'");
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                // JOptionPane.showMessageDialog(null, "finishedgoods");
                initialstock = rs.getDouble("initialStock");
                System.out.println(initialstock);
            }
            rs.close();
            pst.close();
            pst = conn.prepareStatement("select sum(quantity) as sum from Production where date < '" + sdate + "' and recipename = '" + iname + "'");
            rs = pst.executeQuery();
            if (rs.next()) {
                sumProduction = rs.getInt("sum");
                System.out.println(sumProduction);
            }
            rs.close();
            pst.close();
            pst = conn.prepareStatement("select sum(quantity) as sum from ShortAndExcess where date < '" + sdate + "'and typeofdifference = 'Short' and itemName = '" + iname + "'");
            rs = pst.executeQuery();
            if (rs.next()) {
                shorted = rs.getInt("sum");
                // System.out.println(sumTranOut);
            }
            rs.close();
            pst.close();
            pst = conn.prepareStatement("select sum(quantity) as sum from ShortAndExcess where date < '" + sdate + "'and typeofdifference = 'Excess' and itemName = '" + iname + "'");
            rs = pst.executeQuery();
            if (rs.next()) {
                excessed = rs.getInt("sum");
                // System.out.println(sumTranOut);
            }
            rs.close();
            pst.close();
            pst = conn.prepareStatement("select sum(quantity) as sum from transactionsOut where tdate < '" + sdate + "' and item = '" + iname + "'");
            rs = pst.executeQuery();
            if (rs.next()) {
                sumTranOut = rs.getInt("sum");
                System.out.println(sumTranOut);
            }
            rs.close();
            pst.close();
            pst = conn.prepareStatement("select sum(quantity) as sum from transactionsIn where tdate < '" + sdate + "' and item = '" + iname + "'");
            rs = pst.executeQuery();
            if (rs.next()) {
                sumTranIn = rs.getInt("sum");
                System.out.println(sumTranIn);
            }
            rs.close();
            pst.close();
            UsedInProduction = calcproduction(iname, sdate);
            //openingStock = sumProduction - sumTranOut;
            openingStock = initialstock;
            openingStock = openingStock + sumProduction - UsedInProduction - sumTranOut + sumTranIn + excessed - shorted;
            itemqty = openingStock;
            //JOptionPane.showMessageDialog(null,"final:"+openingStock);
            pst = conn.prepareStatement("select cost from FinishedGoods where itemName = '" + iname + "'");
            rs = pst.executeQuery();
            if (rs.next()) {
                itemprice = rs.getDouble("cost");
                //JOptionPane.showMessageDialog(null,"excess"+excessed);
            }
            rs.close();
            pst.close();
            l.add(iname);
            l.add(itemqty);
            l.add(itemprice);
        } catch (Exception e) {
            Logger.getLogger(Rep_RawMaterial.class.getName()).log(Level.SEVERE, null, e);
        }
        return l;
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        String sdate = TextRM.getText();
        if (sdate.equals("")) {
            JOptionPane.showMessageDialog(null, "Please select a date");
        } else {
            List l = new ArrayList();
            String iName[] = new String[500];
            double itemqty[] = new double[500];
            double itemprice[] = new double[500];
            int index = 0;
            String itemName = "";
            try {
                PreparedStatement pst = conn.prepareStatement("select * from FinishedGoods");
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    itemName = rs.getString("itemName");
                    //JOptionPane.showMessageDialog(null,itemName);
                    l = getFGStatus(itemName, sdate);
                    iName[index] = (String) l.get(0);
                    itemqty[index] = (Double) l.get(1);
                    itemprice[index] = (Double) l.get(2);
                    index++;
                }
                List finalList = new ArrayList();
                finalList.add(iName);
                finalList.add(itemqty);
                finalList.add(itemprice);
                showTempListInTable(finalList);
                pst.close();
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(Rep_RawMaterial.class.getName()).log(Level.SEVERE, null, ex);
            }
        }// TODO add your handl        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void go_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_go_btnActionPerformed
        String rname = ComboRecipeName.getSelectedItem().toString();
        String query = "Select item1 as item , round(ratio1,2) as quantity , round((ratio1/batch*100),2) as percentage from Recipe where recipeeName ='" + rname + "' and item1 <> ''"
                + "union Select item2 as item , round(ratio2,2)  as quantity, round((ratio2/batch*100),2) as percentage from Recipe where recipeeName ='" + rname + "' and item2 <> ''"
                + "union Select item3 as item , round(ratio3,2) as quantity, round((ratio3/batch*100),2) as percentage from Recipe where recipeeName ='" + rname + "'  and item3 <> ''"
                + "union Select item4 as item , round(ratio4,2) as quantity, round((ratio4/batch*100),2) as percentage from Recipe where recipeeName = '" + rname + "' and item4 <> ''"
                + "union Select item5 as item , round(ratio5,2)  as quantity, round((ratio5/batch*100),2) as percentage from Recipe where recipeeName ='" + rname + "' and item5 <> ''"
                + "union Select item6 as item , round(ratio6,2) as quantity, round((ratio6/batch*100),2)as percentage from Recipe where recipeeName ='" + rname + "'  and item6 <> ''"
                + "union Select item7 as item , round(ratio7,2) as quantity, round((ratio7/batch*100),2) as percentage from Recipe where recipeeName = '" + rname + "' and item7 <> ''"
                + "union Select item8 as item , round(ratio8,2)  as quantity, round((ratio8/batch*100),2) as percentage from Recipe where recipeeName ='" + rname + "' and item8 <> ''"
                + "union Select item9 as item , round(ratio9,2) as quantity, round((ratio9/batch*100),2) as percentage from Recipe where recipeeName ='" + rname + "'  and item9 <> ''"
                + "union Select item10 as item , round(ratio10,2) as quantity, round((ratio10/batch*100),2) as percentage from Recipe where recipeeName = '" + rname + "' and item10 <> ''"
                + "union Select item11 as item , round(ratio11,2)  as quantity, round((ratio11/batch*100),2) as percentage from Recipe where recipeeName ='" + rname + "' and item11<> ''"
                + "union Select item12 as item , round(ratio12,2) as quantity, round((ratio12/batch*100),2) as percentage from Recipe where recipeeName ='" + rname + "'  and item12 <> ''"
                + "union Select item13 as item , round(ratio13,2) as quantity, round((ratio13/batch*100),2) as percentage from Recipe where recipeeName = '" + rname + "' and item13 <> ''"
                + "union Select item14 as item , round(ratio14,2)  as quantity, round((ratio14/batch*100),2) as percentage from Recipe where recipeeName ='" + rname + "' and item14 <> ''"
                + "union Select item15 as item , round(ratio15,2) as quantity, round((ratio15/batch*100),2) as percentage from Recipe where recipeeName ='" + rname + "'  and item15 <> ''"
                + "union Select item16 as item , round(ratio16,2) as quantity, round((ratio16/batch*100),2) as percentage from Recipe where recipeeName = '" + rname + "' and item16<> ''"
                + "union Select item17 as item , round(ratio17,2)  as quantity, round((ratio17/batch*100),2) as percentage from Recipe where recipeeName ='" + rname + "' and item17 <> ''"
                + "union Select item18 as item , round(ratio18,2) as quantity, round((ratio18/batch*100),2) as percentage from Recipe where recipeeName ='" + rname + "'  and item18 <> ''"
                + "union Select item19 as item , round(ratio19,2) as quantity, round((ratio19/batch*100),2) as percentage from Recipe where recipeeName = '" + rname + "' and item19 <> ''"
                + "union Select item20 as item , round(ratio20,2) as quantity, round((ratio20/batch*100),2) as percentage from Recipe where recipeeName = '" + rname + "' and item20 <> ''"
                + "union select  '  BatchSize : ' , batch , '100' from Recipe where recipeeName = '" + rname + "' order by item DESC";
        if (!rname.equals("select")) {
            queryToTable(query);
            ComboRecipeName.removeAllItems();
            ComboRecipeName.setVisible(false);
            go_btn.setVisible(false);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_go_btnActionPerformed
    public List getProductionDetails(String item, String sdate) {
        int qty[] = new int[800];
        String recipeName[] = new String[800];
        String pDate[] = new String[800];
        int index = 0;
        List details = new ArrayList();
        String recipe = "";
        boolean foundInCustom = false;
        try {
            PreparedStatement outerpst = conn.prepareStatement("select * from production where date<'" + sdate + "'");
            ResultSet outerrs = outerpst.executeQuery();
            while (outerrs.next()) {
                foundInCustom = false;
                recipe = outerrs.getString("recipename");
                recipe = recipe + "@" + outerrs.getString("date");
                //JOptionPane.showMessageDialog(null, recipe);
                PreparedStatement innerpst = conn.prepareStatement("select * from CustomRecipee where recipeeName LIKE '" + recipe + "%'");
                ResultSet customrecipers = innerpst.executeQuery();
                while (customrecipers.next()) {
                    int i = 1;
                    String colName = "";
                    while (i <= 20) {
                        colName = "item" + Integer.toString(i);
                        if (item.equals(customrecipers.getString(colName))) {
                            //JOptionPane.showMessageDialog(null, item);
                            //JOptionPane.showMessageDialog(null, customrecipers.getString(colName));
                            pDate[index] = outerrs.getString("date");
                            recipeName[index] = outerrs.getString("recipename");
                            qty[index] = customrecipers.getInt("ratio" + Integer.toString(i));
                            index++;
                            foundInCustom = true;
                        } else {
                        }
                        i++;
                    }
                }
                innerpst.close();
                customrecipers.close();
                if (!foundInCustom) {
                    recipe = outerrs.getString("recipename");
                    PreparedStatement innerpst1 = conn.prepareStatement("select * from Recipe where recipeeName = '" + recipe + "'");
                    ResultSet recipers = innerpst1.executeQuery();
                    while (recipers.next()) {
                        int i = 1;
                        String colName = "";
                        while (i <= 20) {
                            colName = "item" + Integer.toString(i);
                            if (item.equals(recipers.getString(colName))) {

                                pDate[index] = outerrs.getString("date");
                                recipeName[index] = outerrs.getString("recipename");
                                qty[index] = recipers.getInt("ratio" + Integer.toString(i));
                                index++;
                            } else {
                            }
                            i++;
                        }
                    }
                    innerpst1.close();
                    recipers.close();
                }
            }
            outerpst.close();
            outerrs.close();
        } catch (SQLException ex) {
            Logger.getLogger(Rep_RawMaterial.class.getName()).log(Level.SEVERE, null, ex);
        }
        details.add(qty);
        details.add(pDate);
        details.add(recipeName);
        return details;
    }

    public List getProductionDetails(String item, String sdate, String edate) {
        int qty[] = new int[800];
        String recipeName[] = new String[800];
        String pDate[] = new String[800];
        int index = 0;
        List details = new ArrayList();
        String recipe = "";
        boolean foundInCustom = false;
        try {
            PreparedStatement outerpst = conn.prepareStatement("select * from production where date>='" + sdate + "' and date<='" + edate + "'");
            ResultSet outerrs = outerpst.executeQuery();
            while (outerrs.next()) {
                foundInCustom = false;
                recipe = outerrs.getString("recipename");
                recipe = recipe + "@" + outerrs.getString("date");
                //JOptionPane.showMessageDialog(null, recipe);
                PreparedStatement innerpst = conn.prepareStatement("select * from CustomRecipee where recipeeName LIKE '" + recipe + "%'");
                ResultSet customrecipers = innerpst.executeQuery();
                while (customrecipers.next()) {
                    int i = 1;
                    String colName = "";
                    while (i <= 20) {
                        colName = "item" + Integer.toString(i);
                        if (item.equals(customrecipers.getString(colName))) {
                            //JOptionPane.showMessageDialog(null, item);
                            //JOptionPane.showMessageDialog(null, customrecipers.getString(colName));
                            pDate[index] = outerrs.getString("date");
                            recipeName[index] = outerrs.getString("recipename");
                            qty[index] = customrecipers.getInt("ratio" + Integer.toString(i));
                            index++;
                            foundInCustom = true;
                        } else {
                        }
                        i++;
                    }
                }
                innerpst.close();
                customrecipers.close();
                if (!foundInCustom) {
                    recipe = outerrs.getString("recipename");
                    PreparedStatement innerpst1 = conn.prepareStatement("select * from Recipe where recipeeName = '" + recipe + "'");
                    ResultSet recipers = innerpst1.executeQuery();
                    while (recipers.next()) {
                        int i = 1;
                        String colName = "";
                        while (i <= 20) {
                            colName = "item" + Integer.toString(i);
                            if (item.equals(recipers.getString(colName))) {

                                pDate[index] = outerrs.getString("date");
                                recipeName[index] = outerrs.getString("recipename");
                                qty[index] = recipers.getInt("ratio" + Integer.toString(i));
                                index++;
                            } else {
                            }
                            i++;
                        }
                    }
                    innerpst1.close();
                    recipers.close();
                }
            }
            outerpst.close();
            outerrs.close();
        } catch (SQLException ex) {
            Logger.getLogger(Rep_RawMaterial.class.getName()).log(Level.SEVERE, null, ex);
        }
        details.add(qty);
        details.add(pDate);
        details.add(recipeName);
        return details;
    }

    public void filler_rawMaterial() {
        try {
            PreparedStatement pst = conn.prepareStatement("select itemName from RawMaterials order by itemName");
            ResultSet rs = pst.executeQuery();
            ComboItemName.addItem("select");
            while (rs.next()) {
                ComboItemName.addItem(rs.getString("itemName"));
            }
            rs.close();
            pst.close();
        } catch (SQLException ex) {
            Logger.getLogger(Rep_RawMaterial.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void filler_finishedGoods() {
        try {
            PreparedStatement pst = conn.prepareStatement("select itemName from FinishedGoods order by itemName");
            ResultSet rs = pst.executeQuery();
            ComboItemName.addItem("select");
            while (rs.next()) {
                ComboItemName.addItem(rs.getString("itemName"));
            }
            rs.close();
            pst.close();
        } catch (SQLException ex) {
            Logger.getLogger(Rep_RawMaterial.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void putDataToFile(String data) {

        String strFileName = "tempReport.csv";

        try {
            // Create file 
            FileWriter fstream = new FileWriter(strFileName, false);
            BufferedWriter out = new BufferedWriter(fstream);
            out.write(data);
            //for new line 
            //	out.newLine();
            //Close the output stream
            out.close();
        } catch (Exception e) {//Catch exception if any
            System.err.println("Error: " + e.getMessage());
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;




                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Rep_RawMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Rep_RawMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Rep_RawMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Rep_RawMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Rep_RawMaterial dialog = new Rep_RawMaterial(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboItemName;
    private javax.swing.JComboBox ComboRecipeName;
    private com.toedter.calendar.JDateChooser FromDatechooser;
    private com.toedter.calendar.JDateChooser RMDateChooser;
    private javax.swing.JTextField TextRM;
    private com.toedter.calendar.JDateChooser ToDatechooser;
    private javax.swing.JButton btnCustomers;
    private javax.swing.JButton btnFinishedGoods;
    private javax.swing.JButton btnGo;
    private javax.swing.JButton btnRawMaterial;
    private javax.swing.JButton btnRecipe;
    private javax.swing.JButton btnSuppliers;
    private javax.swing.JButton butProduction;
    private javax.swing.JButton butTranscationIN;
    private javax.swing.JButton butTranscationOut;
    private javax.swing.ButtonGroup buttonGroup1;
    private com.toedter.calendar.JDateChooser dayReportDateChooser;
    private javax.swing.JButton go_btn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton radioFinishedGoods;
    private javax.swing.JRadioButton radioRawMaterials;
    private javax.swing.JTextField txtDayReport;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtToDate;
    // End of variables declaration//GEN-END:variables
}
